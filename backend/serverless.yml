service:
  name: serverless-c19-test

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    USER_TABLE: c19-users-${self:provider.stage}
    TEST_TABLE: c19-tests-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    S3_BUCKET: c19-bucket-sricarde-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 90000


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Todos API
        description: Serverless application for the test manegement of the covid 19

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetUsers:
    handler: src/lambda/http/getUsers.handler
    events:
      - http:
          method: get
          path: users
          cors: true
          authorizer: Auth
          documentation:
            summary: Get users
            description: Endpoint to get an existent user in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetUser:
    handler: src/lambda/http/getUser.handler
    events:
      - http:
          method: get
          path: user
          cors: true
          documentation:
            summary: Get an user
            description: Endpoint to get an existent user in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateUser:
    handler: src/lambda/http/createUser.handler
    events:
      - http:
          method: post
          path: users
          cors: true
          authorizer: Auth
          documentation:
            summary: Create a new user
            description: Endpoint to create a user in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateUserAddress:
    handler: src/lambda/http/updateUserAddress.handler
    events:
      - http:
          method: put
          path: users/address
          cors: true
          authorizer: Auth
          documentation:
            summary: Update an user address
            description: Endpoint to update an existent user address in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteUser:
    handler: src/lambda/http/deleteUser.handler
    events:
      - http:
          method: delete
          path: users/{userId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a user by userId
            description: Endppoint to delete a user in the DB passing an userId
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: tests/{testId}/attachment
          cors: true
          authorizer: Auth
          documentation:
            summary: Generate an Upload Url
            description: Generate an Upload Url
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: "Allow"
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  CreateTest:
    handler: src/lambda/http/createTest.handler
    events:
      - http:
          method: post
          path: tests
          cors: true
          authorizer: Auth
          documentation:
            summary: Create a new test
            description: Endpoint to create a test in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetTest:
    handler: src/lambda/http/getTest.handler
    events:
      - http:
          method: get
          path: test
          cors: true
          documentation:
            summary: Get a test
            description: Endpoint to get an existent test in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  GetTests:
    handler: src/lambda/http/getTests.handler
    events:
      - http:
          method: get
          path: tests
          cors: true
          documentation:
            summary: Get a list of tests
            description: Endpoint to get an existent tests in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  DeleteTest:
    handler: src/lambda/http/deleteTest.handler
    events:
      - http:
          method: delete
          path: tests/user/{userId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Delete a test by userId
            description: Endppoint to delete a test in the DB passing an userId
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Delete
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  UpdateTestDate:
    handler: src/lambda/http/updateTestDate.handler
    events:
      - http:
          method: put
          path: tests/date
          cors: true
          authorizer: Auth
          documentation:
            summary: Update an test date
            description: Endpoint to update an existent test date in the DB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - codedeploy:*
        Resource:
          - '*'
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TEST_TABLE}
      - Effect: "Allow" # xray permissions (required)
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    TestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: testId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: testId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TEST_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index


    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false


    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
